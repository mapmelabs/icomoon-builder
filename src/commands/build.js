const fs = require('fs-extra')
const path = require('path')
const chalk = require('chalk')
const decompress = require('decompress')
const replace = require('replace-in-file')
const logger = require('../logger')
const config = require('../config')
const clean = require('./clean')

/**
 * Uncompresses the zip file generated by the Icomoon app.
 *
 * @param {string} icomoonZipFile
 * @param {string} destPath
 */
const unzipIcomoon = (icomoonZipFile, dest) => {
  return decompress(icomoonZipFile, dest).then(files => {
    logger.info(`Unzipped icomoon file into ${chalk.white(icomoonZipFile)}`);
  });
};

/**
 * Moves fonts to the given destination.
 */
const moveFonts = (source, dest) => {
  return fs.copy(
    path.resolve(source, 'fonts'),
    dest,
  ).then(() => {
    logger.info('Fonts copied');
  });
};

/**
 * Moves style files to the given destination.
 */
const moveStyles = (source, dest) => {
  const files = [
    {
      src: path.resolve(source, 'style.scss'),
      dest: path.resolve(dest, 'icons.scss')
    },
    {
      src: path.resolve(source, 'variables.scss'),
      dest: path.resolve(dest, '_variables.scss')
    }
  ];

  return Promise
    .all(files.map(item => fs.copy(item.src, item.dest)))
    .then(() => {
      logger.info('Styles copied');
    });
};

/**
 * Moves all files related to the html demo.
 */
const generateDemoFiles = (source, dest) => {
  const files = [
    {
      src: path.resolve(source, 'demo.html'),
      dest: path.resolve(dest, 'demo/index.html')
    },
    {
      src: path.resolve(source, 'demo-files/demo.css'),
      dest: path.resolve(dest, 'demo/styles.css')
    },
    {
      src: path.resolve(source, 'demo-files/demo.js'),
      dest: path.resolve(dest, 'demo/scripts.js')
    },
    {
      src: path.resolve(source, 'style.css'),
      dest: path.resolve(dest, 'demo/icons.css')
    },
    {
      src: path.resolve(source, 'selection.json'),
      dest: path.resolve(dest, 'icomoon.json')
    }
  ];

  return Promise
    .all(files.map(item => fs.copy(item.src, item.dest)))
    .then(() => replace({
      files: path.resolve(dest, 'demo/index.html'),
      from: [
        'demo-files/demo.css',
        'demo-files/demo.js',
        'style.css'
      ],
      to: [
        'styles.css',
        'scripts.js',
        'icons.css'
      ],
    }))
    .then(() => replace({
      files: path.resolve(dest, 'demo/icons.css'),
      from: [/url\('fonts\//g],
      to: ['url(\'../../fonts/'],
    }))
    .then(() => {
      logger.info('Demo files copied');
    });
};

/**
 * Removes temporary folder.
 *
 * @param {string} tempPath
 */
const removeTempDir = (tempPath) => {
  return fs.remove(tempPath).then(err => {
    if (err) {
      logger.error(err);
      return;
    }

    logger.info(`Removed directory ${chalk.white(tempPath)}`);
  });
};

const getFiles = (paths) => {
  return [
    {
      src: path.resolve(paths.temp, 'fonts'),
      dest: paths.fonts,
    },
    {
      src: path.resolve(paths.temp, 'style.scss'),
      dest: path.resolve(paths.styles, 'icons.scss')
    },
    {
      src: path.resolve(paths.temp, 'variables.scss'),
      dest: path.resolve(paths.styles, '_variables.scss')
    },
    {
      src: path.resolve(paths.temp, 'demo.html'),
      dest: path.resolve(paths.docs, 'demo/index.html')
    },
    {
      src: path.resolve(paths.temp, 'demo-files/demo.css'),
      dest: path.resolve(paths.docs, 'demo/styles.css')
    },
    {
      src: path.resolve(paths.temp, 'demo-files/demo.js'),
      dest: path.resolve(paths.docs, 'demo/scripts.js')
    },
    {
      src: path.resolve(paths.temp, 'style.css'),
      dest: path.resolve(paths.docs, 'demo/icons.css')
    },
    {
      src: path.resolve(paths.temp, 'selection.json'),
      dest: path.resolve(paths.docs, 'icomoon.json')
    }
  ];
};

/**
 * Uncompresses the zip file generated by icomoon and moves the files to the new destination
 *
 * @param {string} icomoonZipFile
 */
const cmd = (icomoonZipFile, paths) => {
  clean(Object.values(paths))
    .then(() => unzipIcomoon(icomoonZipFile, paths.temp))
    .then(() => moveFonts(paths.temp, paths.fonts))
    .then(() => moveStyles(paths.temp, paths.styles))
    .then(() => generateDemoFiles(paths.temp, paths.docs))
    .then(() => removeTempDir(paths.temp))
    .then(() => logger.info('All done'));
}

module.exports = {
  cmd: cmd,
  getFiles: getFiles
};
