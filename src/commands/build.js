const fs = require('fs-extra')
const path = require('path')
const chalk = require('chalk')
const decompress = require('decompress')
const replace = require('replace-in-file')
const clean = require('./clean')

const TEMP_DIR = path.resolve('.tmp')

/**
 * Uncompresses the zip file generated by the Icomoon app.
 *
 * @param {string} icomoonZipFile
 */
const unzipIcomoon = (icomoonZipFile) => {
  return decompress(icomoonZipFile, TEMP_DIR).then(files => {
    console.log(`Unzipped icomoon files into ${chalk.green(icomoonZipFile)}`);
  });
};

/**
 * Returns the list of files that will be copied.
 * 
 * @param {object} paths 
 */
const getFiles = (paths) => {
  return [
    {
      src: path.resolve(TEMP_DIR, 'fonts'),
      dest: paths.fonts,
    },
    {
      src: path.resolve(TEMP_DIR, 'style.scss'),
      dest: path.resolve(paths.styles, 'icons.scss')
    },
    {
      src: path.resolve(TEMP_DIR, 'variables.scss'),
      dest: path.resolve(paths.styles, '_variables.scss')
    },
    {
      src: path.resolve(TEMP_DIR, 'demo.html'),
      dest: path.resolve(paths.docs, 'demo/index.html')
    },
    {
      src: path.resolve(TEMP_DIR, 'demo-files/demo.css'),
      dest: path.resolve(paths.docs, 'demo/styles.css')
    },
    {
      src: path.resolve(TEMP_DIR, 'demo-files/demo.js'),
      dest: path.resolve(paths.docs, 'demo/scripts.js')
    },
    {
      src: path.resolve(TEMP_DIR, 'style.css'),
      dest: path.resolve(paths.docs, 'demo/icons.css')
    },
    {
      src: path.resolve(TEMP_DIR, 'selection.json'),
      dest: path.resolve(paths.docs, 'icomoon.json')
    }
  ];
};

/**
 * Copies the files from source to destination.
 * 
 * @param {object} paths 
 */
const copyFiles = (paths) => {
  const files = getFiles(paths);

  return Promise
    .all(files.map(item => fs.copy(item.src, item.dest)))
    .then(() => {
      console.log('Files copied to destination');
    });
};

/**
 * Updates the former file paths in the demo files.
 * 
 * @param {string} docsPath 
 */
const updateDemoFiles = (docsPath) => {
  return replace({
      files: path.resolve(docsPath, 'demo/index.html'),
      from: [
        'demo-files/demo.css',
        'demo-files/demo.js',
        'style.css'
      ],
      to: [
        'styles.css',
        'scripts.js',
        'icons.css'
      ],
    })
    .then(() => replace({
      files: path.resolve(docsPath, 'demo/icons.css'),
      from: [/url\('fonts\//g],
      to: ['url(\'../../fonts/'],
    }))
    .then(() => {
      console.log('Modified demo files to use the new paths.');
    });
};

/**
 * Removes temporary folder.
 */
const removeTempDir = () => {
  return fs.remove(TEMP_DIR).then(() => {
    console.log(`Removed temporary directory ${chalk.green(TEMP_DIR)}`);
  });
};

/**
 * Uncompresses the zip file generated by icomoon and moves the files to the new destination
 *
 * @param {string} icomoonZipFile
 */
const cmd = (icomoonZipFile, paths) => {
    return unzipIcomoon(icomoonZipFile)
      .then(() => copyFiles(paths))
      .then(() => updateDemoFiles(paths.docs))
      .then(removeTempDir);
}

module.exports = {
  cmd: cmd,
  getFiles: getFiles
};
